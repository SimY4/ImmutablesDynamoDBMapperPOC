package com.github.simy4.poc.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.immutables.value.Value;
import org.springframework.lang.Nullable;
import software.amazon.awssdk.enhanced.dynamodb.EnhancedType;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

@Data
@Value.Immutable
@JsonDeserialize(as = ImmutableEntity.class)
public abstract class Entity {
  public static final String PK_PREFIX = "Entity#";

  public static TableSchema<Entity> schema() {
    return TableSchema.builder(Entity.class, ImmutableEntity.Builder.class)
        .newItemBuilder(ImmutableEntity::builder, ImmutableEntity.Builder::build)
        .addAttribute(
            String.class,
            a -> a.name("tenant").getter(Entity::getTenant).setter(ImmutableEntity.Builder::tenant))
        .addAttribute(
            String.class,
            a -> a.name("name").getter(Entity::getName).setter(ImmutableEntity.Builder::name))
        .addAttribute(
            EnhancedType.documentOf(Address.class, Address.schema()),
            a ->
                a.name("address")
                    .getter(e -> ImmutableAddress.copyOf(e.getAddress()))
                    .setter(ImmutableEntity.Builder::address))
        .addAttribute(
            EnhancedType.listOf(EnhancedType.documentOf(Email.class, Email.schema())),
            a ->
                a.name("email")
                    .getter(Entity::getEmails)
                    .setter(ImmutableEntity.Builder::addAllEmails))
        .addAttribute(
            Status.class,
            a -> a.name("status").getter(Entity::getStatus).setter(ImmutableEntity.Builder::status))
        .addAttribute(
            String.class,
            a ->
                a.name("pk")
                    .getter(Entity::getPk)
                    .setter(ImmutableEntity.Builder::pk)
                    .tags(StaticAttributeTags.primaryPartitionKey()))
        .addAttribute(
            String.class,
            a ->
                a.name("sk")
                    .getter(Entity::getSk)
                    .setter(ImmutableEntity.Builder::sk)
                    .tags(StaticAttributeTags.primarySortKey()))
        .addAttribute(
            Instant.class,
            a ->
                a.name("updated")
                    .getter(Entity::getUpdated)
                    .setter(ImmutableEntity.Builder::updated)
                    .tags(
                        AutoGeneratedTimestampRecordExtension.AttributeTags
                            .autoGeneratedTimestampAttribute()))
        .addAttribute(
            Instant.class,
            a ->
                a.name("created")
                    .getter(Entity::getCreated)
                    .setter(ImmutableEntity.Builder::created))
        .addAttribute(
            Long.class,
            a ->
                a.name("version")
                    .getter(Entity::getVersion)
                    .setter(ImmutableEntity.Builder::version)
                    .tags(VersionedRecordExtension.AttributeTags.versionAttribute()))
        .build();
  }

  public static Identity id(String pk, String sk) {
    return new Identity(PK_PREFIX + pk, sk);
  }

  @Value.Auxiliary
  @JsonIgnore
  public Identity getId() {
    return id(getPk(), getSk());
  }

  public abstract String getTenant();

  public abstract String getName();

  public abstract Address getAddress();

  public abstract List<Email> getEmails();

  public abstract Status getStatus();

  @Value.Default
  @JsonIgnore
  public String getPk() {
    return PK_PREFIX + getTenant();
  }

  @Value.Default
  @JsonProperty("id")
  public String getSk() {
    return UUID.randomUUID().toString();
  }

  @Nullable public abstract Instant getUpdated();

  @Value.Default
  public Instant getCreated() {
    return Instant.now();
  }

  @Nullable @JsonIgnore
  public abstract Long getVersion();

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
      return false;
    }
    Entity entity = (Entity) obj;
    return getId().equals(entity.getId());
  }

  @Override
  public int hashCode() {
    return getId().hashCode();
  }
}
