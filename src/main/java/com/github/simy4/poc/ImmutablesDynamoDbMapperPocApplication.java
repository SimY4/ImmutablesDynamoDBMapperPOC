package com.github.simy4.poc;

import com.github.simy4.poc.model.Entity;
import com.github.simy4.poc.model.ImmutableEntity;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Profile;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbAsyncTable;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.model.CreateTableEnhancedRequest;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.regions.providers.AwsRegionProvider;
import software.amazon.awssdk.regions.providers.DefaultAwsRegionProviderChain;
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClientBuilder;
import software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;
import software.amazon.awssdk.services.dynamodb.waiters.DynamoDbAsyncWaiter;

import java.net.URI;

/** Starting point of this application. */
@SpringBootApplication
public class ImmutablesDynamoDbMapperPocApplication {

  public static void main(String[] args) {
    SpringApplication.run(ImmutablesDynamoDbMapperPocApplication.class, args);
  }

  // AWS v1

  @Bean
  public AwsCredentialsProvider awsCredentialsProvider(
      @Value("${spring.cloud.aws.credentials.access-key:#{null}}") String staticAccessKey,
      @Value("${spring.cloud.aws.credentials.secret-key:#{null}}") String staticSecretKey) {
    return null == staticAccessKey || null == staticSecretKey
        ? DefaultCredentialsProvider.create()
        : StaticCredentialsProvider.create(
            AwsBasicCredentials.create(staticAccessKey, staticSecretKey));
  }

  @Lazy
  @Bean
  public AwsRegionProvider awsRegionProvider(
      @Value("${spring.cloud.aws.region.static:#{null}}") String staticRegion) {
    return null == staticRegion
        ? DefaultAwsRegionProviderChain.builder().build()
        : () -> Region.of(staticRegion);
  }

  @Lazy
  @Bean(destroyMethod = "close")
  public DynamoDbAsyncClient dynamoDB(
      AwsCredentialsProvider awsCredentialsProvider,
      AwsRegionProvider regionProvider,
      @Value("${spring.cloud.aws.dynamodb.endpoint:#{null}}") URI endpoint) {
    DynamoDbAsyncClientBuilder builder =
        DynamoDbAsyncClient.builder()
            .credentialsProvider(awsCredentialsProvider)
            .region(regionProvider.getRegion());
    if (null != endpoint) {
      builder = builder.endpointOverride(endpoint);
    }
    return builder.build();
  }

  @Bean
  public DynamoDbEnhancedAsyncClient dynamoDBEnhancedClient(DynamoDbAsyncClient dynamoDB) {
    return DynamoDbEnhancedAsyncClient.builder()
        .dynamoDbClient(dynamoDB)
        .extensions(
            AutoGeneratedTimestampRecordExtension.builder().build(),
            VersionedRecordExtension.builder().build())
        .build();
  }

  @Bean
  public DynamoDbAsyncTable<ImmutableEntity> entityTable(
      DynamoDbEnhancedAsyncClient dynamoDBEnhancedClient,
      @Value("${db.entities.table-name}") String tableName) {
    return dynamoDBEnhancedClient.table(tableName, Entity.schema());
  }

  @Bean
  @Profile("local")
  public ApplicationRunner dynamoDBInitializer(
      DynamoDbAsyncClient dynamoDB, DynamoDbAsyncTable<ImmutableEntity> entityTable) {
    return args -> {
      entityTable
          .createTable(
              CreateTableEnhancedRequest.builder()
                  .provisionedThroughput(
                      ProvisionedThroughput.builder()
                          .readCapacityUnits(2L)
                          .writeCapacityUnits(2L)
                          .build())
                  .build())
          .thenAcceptAsync(
              ignored -> {
                try (var waiter = DynamoDbAsyncWaiter.builder().client(dynamoDB).build()) {
                  waiter
                      .waitUntilTableExists(b -> b.tableName(entityTable.tableName()).build())
                      .thenAccept(response -> response.matched().response().orElseThrow())
                      .join();
                }
              })
          .join();
    };
  }
}
